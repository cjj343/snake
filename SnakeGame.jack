class SnakeGame
{
	field SnakeChunk head;
	field Fruit fruit;
	field int direction, score;

	//initialize snake location and set direction to zero
	constructor SnakeGame new()
	{	
		//start head in the middle of the screen
		let head = SnakeChunk.new(254, 126);

		let fruit = Fruit.new();

		let score = 0;

		//snake head is stationary to begin
		let direction = 0;
		return this;	
	}


	//jack specific method for cleaning up memory
	method void dispose()
	{
		do head.dispose();
		do fruit.dispose();
		do Memory.deAlloc(this);
		return;
	}


	//run game method
	method void Run()
	{
		var char key;
		var int oldDirection;
		var boolean exit;
		let exit = false;
		
		while(~exit)
		{
			while ((key = 0) & (~exit)) 
			{
				//wait for new keyboard input			
            	let key = Keyboard.keyPressed();
            	
            	//check to see if snake head has contacted fruit
				if(fruit.resetFruitPos(head.getX(), head.getY()))
				{	
					//add a peice to tail if snake eats fruit
					do head.addTail();

					//increment score
					let score = score + 1;
				}

            	//check to see if head has contacted wall or tail
            	let exit = head.moveChunk(direction);

				do Sys.wait(10);	
         	}

         	//exit
			if (key = 81)  
			{ 
				let exit = true;
			}

			//up
			if  ((key = 131) & (~(oldDirection = 2)))
			{ 
				let direction = 1; 
			}

			//down
         	if ((key = 133) & (~(oldDirection = 1)))
			{ 
				let direction = 2; 
			}

			//left
         	if ((key = 130) & (~(oldDirection = 4)))
			{ 
				let direction = 3; 
			}

			//right
         	if ((key = 132) & (~(oldDirection = 3)))
			{ 
				let direction = 4; 
			}
			
			let oldDirection = direction;
			let key = 0;
		}
		return;		
	}

	//print the score at the end of the game
	method void Stats()
	{
		var String s;
		let s = "Score: ";

		do Screen.clearScreen();

		do Output.printString(s);

		do Output.printInt(score);

		return;
	}
}
